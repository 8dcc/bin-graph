#+title: Binary graph
#+options: toc:nil
#+startup: showeverything
#+author: 8dcc

This program provides a simple way of visualizing the different regions of a
binary file.

These are some references that inspired this project:

- [[https://github.com/xoreaxeaxeax][Christopher Domas]] - The future of RE Dynamic Binary Visualization ([[https://www.youtube.com/watch?v=4bM3Gut1hIk][YouTube]]).
- Sergey Bratus and Greg Conti - Voyage of the reverser ([[https://www.youtube.com/watch?v=T3qqeP4TdPA][YouTube]]).
- [[https://corte.si][Aldo Cortesi]] - [[https://corte.si/posts/visualisation/binvis/][Visualizing binaries with space-filling curves]].
- Aldo Cortesi - [[https://corte.si/posts/visualisation/entropy/][Visualizing entropy in binary files]].

If you are interested on more professional approaches, check out the following
links:

- The [[https://binvis.io][binvis.io]] online tool by Aldo Cortesi.
- The [[https://github.com/mewbak/binary_viewer][mewbak/binary_viewer]] repository, which also includes some other links.
- The [[https://github.com/wapiflapi/veles][wapiflapi/veles]] repository, which is no longer maintained.

* Building

The program depends on =libpng= for exporting the image. Install it from your
package manager.

#+begin_src bash
# Arch-based distros
pacman -S libpng

# Gentoo
emerge media-libs/libpng
#+end_src

Once all the dependencies are installed, compile the program.

#+begin_src bash
git clone https://github.com/8dcc/bin-graph
cd bin-graph
make
#+end_src

If you want to install it on your system, run the following command.

#+begin_src bash
sudo make install
#+end_src

* Usage and modes

To see the full program usage, use the =--help= argument.

#+begin_src bash
bin-graph --help
# Usage: bin-graph [OPTION...] INPUT OUTPUT
# Simple program for visualizing binary files.
#
# ...
#+end_src

The main behavior of the program is determined by the "generation mode", which
affects how the input binary is represented in the output graph. This is
controlled by the =--mode= option, and the list of available values, along with
their descriptions, can be printed with the =--list-modes= argument.

#+begin_src bash
bin-graph --list-modes
# * grayscale: The brightness of each pixel represents the value of each sample
#   (00..FF).
# * ascii: The color of each pixel represents the "printability" of each sample
#   in a linear way. Black represents a null byte (00), white represents a set
#   byte (FF), blue represents printable characters and red represents any other
#   value.
# ...
#+end_src

* Scripts

This project also includes some bash scripts that extend the functionality of
the main program.

The [[file:scripts/bin-graph-section.sh][bin-graph-section.sh]] script uses =readelf= and =grep= to find the offset and
size of the specified ELF section, and uses that as the =--offset-*= arguments for
=bin-graph=. Additional options after the section name will be passed to
=bin-graph=.

#+begin_src bash
./scripts/bin-graph-section.sh SECTION [OPTION...] INPUT OUTPUT.png
# ...
#+end_src

The [[file:scripts/bin-graph-hexdump.sh][bin-graph-hexdump.sh]] script prints the output of a hexdump command (=xxd=)
side-by-side with the ANSI-escaped output of =bin-graph=.

#+begin_src bash
./scripts/bin-graph-hexdump.sh [OPTION...] INPUT
# ...
#+end_src

The [[file:scripts/bin-graph-all-modes.sh][bin-graph-all-modes.sh]] script generates all possible binary graphs from an
input file by calling =bin-graph= with different =--mode= arguments.

#+begin_src bash
./scripts/bin-graph-all-modes.sh INPUT
# ...
#+end_src

* Overview of the code

I tried to make each part of the program as modular and independent as possible,
for more maintainability and for easier expansion.

This is the basic process for generating an image from a binary.

1. The arguments are /parsed/ by [[https://www.gnu.org/software/libc/manual/html_node/Argp.html][the =argp= library]] from =args.c= into an =Args=
   structure. Some common checks are performed in this stage, but most modes
   also have their own mode-specific conditions.
2. The data is /read/ from the input file as a byte array, using the =read_file=
   function, defined in [[file:src/read_file.c][read_file.c]].
3. An =Image= structure is /generated/ from the byte array, using a different
   generation function depending on the main program mode. This =Image= structure
   is stored in memory as an array of RGB =Color= structures along with the image
   dimensions.
4. The =Image= structure is /exported/ into the output file depending on the output
   format (e.g. into a PNG file, or as ANSI escaped text).

* Screenshots

#+begin_src bash
./bin-graph --mode grayscale bin-graph examples/grayscale.png
#+end_src

[[file:examples/grayscale.png]]

#+begin_src bash
./bin-graph --mode ascii bin-graph examples/ascii.png
#+end_src

[[file:examples/ascii.png]]

#+begin_src bash
./bin-graph --mode entropy --transform-squares 16 bin-graph examples/entropy-squared.png
#+end_src

[[file:examples/entropy-squared.png]]

#+begin_src bash
./bin-graph --mode entropy-histogram --width 256 --block-size 512 bin-graph examples/entropy-histogram.png
#+end_src

[[file:examples/entropy-histogram.png]]

#+begin_src bash
# Only the .text section of the ELF file
./scripts/bin-graph-section.sh .text --width 256 --mode histogram bin-graph examples/histogram.png
#+end_src

[[file:examples/histogram.png]]

#+begin_src bash
# Only the .rodata section of the ELF file
./scripts/bin-graph-section.sh .rodata --mode bigrams bin-graph examples/rodata-bigrams.png
#+end_src

[[file:examples/rodata-bigrams.png]]

#+begin_src bash
./bin-graph --mode dotplot --zoom 1 --offset-start 5000 --offset-end 5500 input.wav examples/dotplot.png
#+end_src

[[file:examples/dotplot.png]]
